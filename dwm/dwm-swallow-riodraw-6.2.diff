From 9604d9c985d3fda27aedc4d65e64b14190668259 Mon Sep 17 00:00:00 2001
From: bakkeby <bakkeby@gmail.com>
Date: Sun, 14 Feb 2021 14:16:33 +0100
Subject: [PATCH 2/2] Adding riodraw on top of swallow

---
 config.def.h |   5 +++
 dwm.c        | 124 ++++++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 128 insertions(+), 1 deletion(-)

diff --git a/config.def.h b/config.def.h
index 392ae32..01e2901 100644
--- a/config.def.h
+++ b/config.def.h
@@ -6,6 +6,9 @@ static const unsigned int snap      = 32;       /* snap pixel */
 static const int swallowfloating    = 0;        /* 1 means swallow floating windows by default */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
+static const char slopspawnstyle[]  = "-t 0 -c 0.92,0.85,0.69,0.3 -o"; /* do NOT define -f (format) here */
+static const char slopresizestyle[] = "-t 0 -c 0.92,0.85,0.69,0.3"; /* do NOT define -f (format) here */
+static const int riodraw_borders    = 0;        /* 0 or 1, indicates whether the area drawn using slop includes the window borders */
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
 static const char col_gray1[]       = "#222222";
@@ -66,6 +69,8 @@ static Key keys[] = {
 	/* modifier                     key        function        argument */
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
 	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
+	{ MODKEY|ControlMask,           XK_Return, riospawn,       {.v = termcmd } },
+	{ MODKEY,                       XK_s,      rioresize,      {0} },
 	{ MODKEY,                       XK_b,      togglebar,      {0} },
 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
diff --git a/dwm.c b/dwm.c
index c03f0a3..9f15d9c 100644
--- a/dwm.c
+++ b/dwm.c
@@ -204,6 +204,10 @@ static void resize(Client *c, int x, int y, int w, int h, int interact);
 static void resizeclient(Client *c, int x, int y, int w, int h);
 static void resizemouse(const Arg *arg);
 static void restack(Monitor *m);
+static void riodraw(const char slopstyle[]);
+static void rioposition(Client *c, int x, int y, int w, int h);
+static void rioresize(const Arg *arg);
+static void riospawn(const Arg *arg);
 static void run(void);
 static void scan(void);
 static int sendevent(Client *c, Atom proto);
@@ -218,6 +222,7 @@ static void seturgent(Client *c, int urg);
 static void showhide(Client *c);
 static void sigchld(int unused);
 static void spawn(const Arg *arg);
+static pid_t spawncmd(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *);
@@ -263,6 +268,9 @@ static int bh, blw = 0;      /* bar geometry */
 static int lrpad;            /* sum of left and right padding for text */
 static int (*xerrorxlib)(Display *, XErrorEvent *);
 static unsigned int numlockmask = 0;
+static int riodimensions[4] = { -1, -1, -1, -1 };
+static Client *rioclient = NULL;
+static pid_t riopid = 0;
 static void (*handler[LASTEvent]) (XEvent *) = {
 	[ButtonPress] = buttonpress,
 	[ClientMessage] = clientmessage,
@@ -1122,6 +1130,19 @@ manage(Window w, XWindowAttributes *wa)
 			unfocus(selmon->sel, 0);
 		c->mon->sel = c;
 	}
+
+	if (!c->swallowing) {
+		if (riopid && isdescprocess(riopid, c->pid)) {
+			if (riodimensions[3] == -1) {
+				c->isfloating = 1;
+				rioclient = c;
+				c->x = WIDTH(c) * -2;
+			}
+			else
+				rioposition(c, riodimensions[0], riodimensions[1], riodimensions[2], riodimensions[3]);
+		}
+	}
+
 	arrange(c->mon);
 	XMapWindow(dpy, c->win);
 	if (focusclient)
@@ -1461,6 +1482,99 @@ restack(Monitor *m)
 	while (XCheckMaskEvent(dpy, EnterWindowMask, &ev));
 }
 
+void
+riodraw(const char slopstyle[])
+{
+	int i;
+	char str[100];
+	char strout[100];
+	char tmpstring[30] = {0};
+	char slopcmd[100] = "slop -f x%xx%yx%wx%hx ";
+	int firstchar = 0;
+	int counter = 0;
+
+	if (!riopid && !rioclient)
+		return;
+
+	strcat(slopcmd, slopstyle);
+	FILE *fp = popen(slopcmd, "r");
+
+	while (fgets(str, 100, fp) != NULL)
+		strcat(strout, str);
+
+	pclose(fp);
+
+	if (strlen(strout) < 6)
+		return;
+
+	for (i = 0; i < strlen(strout); i++){
+		if (!firstchar) {
+			if (strout[i] == 'x')
+				firstchar = 1;
+			continue;
+		}
+
+		if (strout[i] != 'x')
+			tmpstring[strlen(tmpstring)] = strout[i];
+		else {
+			riodimensions[counter] = atoi(tmpstring);
+			counter++;
+			memset(tmpstring,0,strlen(tmpstring));
+		}
+	}
+
+	if (rioclient)
+		rioposition(rioclient, riodimensions[0], riodimensions[1], riodimensions[2], riodimensions[3]);
+}
+
+void
+rioposition(Client *c, int x, int y, int w, int h)
+{
+	Monitor *m;
+	if (w > 50 && h > 50 && x > -40 && y > -40 &&
+			(abs(c->w - w) > 20 || abs(c->h - h) > 20 || abs(c->x - x) > 20 || abs(c->y - y) > 20)) {
+		if ((m = recttomon(x, y, w, h)) && m != c->mon) {
+			detach(c);
+			detachstack(c);
+			c->mon = m;
+			c->tags = m->tagset[m->seltags];
+			attach(c);
+			attachstack(c);
+			selmon = m;
+			focus(c);
+		}
+
+		c->isfloating = 1;
+		if (riodraw_borders)
+			resizeclient(c, x, y, w - (c->bw * 2), h - (c->bw * 2));
+		else
+			resizeclient(c, x - c->bw, y - c->bw, w, h);
+		drawbar(c->mon);
+		arrange(c->mon);
+	} else
+		fprintf(stderr, "rioposition: refusing to position client %s at x (%d), y (%d), w (%d), h (%d)\n", c->name, x, y, w, h);
+
+	riodimensions[3] = -1;
+	rioclient = NULL;
+	riopid = 0;
+}
+
+/* drag out an area using slop and resize the selected window to it */
+void
+rioresize(const Arg *arg)
+{
+	rioclient = (arg && arg->v ? (Client*)arg->v : selmon->sel);
+	riodraw(slopresizestyle);
+}
+
+/* spawn a new window and drag out an area using slop to postiion it */
+void
+riospawn(const Arg *arg)
+{
+	riopid = spawncmd(arg);;
+	riodraw(slopspawnstyle);
+}
+
 void
 run(void)
 {
@@ -1731,9 +1845,16 @@ sigchld(int unused)
 void
 spawn(const Arg *arg)
 {
+	spawncmd(arg);
+}
+
+pid_t
+spawncmd(const Arg *arg)
+{
+	pid_t pid;
 	if (arg->v == dmenucmd)
 		dmenumon[0] = '0' + selmon->num;
-	if (fork() == 0) {
+	if ((pid = fork()) == 0) {
 		if (dpy)
 			close(ConnectionNumber(dpy));
 		setsid();
@@ -1742,6 +1863,7 @@ spawn(const Arg *arg)
 		perror(" failed");
 		exit(EXIT_SUCCESS);
 	}
+	return pid;
 }
 
 int
-- 
2.19.1

